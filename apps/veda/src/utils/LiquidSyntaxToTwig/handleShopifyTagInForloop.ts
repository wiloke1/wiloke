import { ComponentData } from 'types/Page';
import { SettingArray, SettingFlexOrder, SettingResponsive, SettingSpace } from 'types/Schema';
import { Consts } from 'utils/constants/constants';
import { compose } from 'ramda';
import { i18n } from 'translation';
import strToRegexpPattern from 'utils/functions/strToRegexpPattern';
import { v4 } from 'uuid';
import { convertToSyntaxShopifyDataType } from './utils/convertToSyntaxShopifyDataType';
import { getMatches } from './utils/getMatches';
import { isExistExactVariableNameInLiquidCode } from './utils/isExistExactVariableNameInLiquidCode';
import { isFieldTranslation } from './utils/isFieldTranslation';
import { replaceExactRegexpInLiquidCode } from './utils/replaceExactRegexpInLiquidCode';
import { handleBOCDelimiters, handleReplaceGeneralOpenCloseBlock } from './preprocess';
import { handleBOCDelimiters as handleBOCDelimitersPostprocess } from './postprocess';
import { LiquidSyntaxToTwigError } from './Error';
import { SHOPIFY_TAG } from './theme_tags/liquid';

interface GetBOCsBetweenSomething {
  liquid: string;
  startBOC: RegExp;
  endBOC: RegExp;
  isValid: (BOC: string) => boolean;
  ignoreNested: boolean;
  withUniqId: boolean;
}

const getBOCsBetweenSomething_ = ({ endBOC, liquid, startBOC, isValid, ignoreNested, withUniqId }: GetBOCsBetweenSomething) => {
  let signals;
  const startIndexes = [];
  const BOCs = [];
  const regex = new RegExp(`${startBOC.source}|${endBOC.source}`, 'gm');
  while (true) {
    signals = regex.exec(liquid);
    if (signals !== null) {
      const signal = signals[0];
      if (!endBOC.test(signal)) {
        if (!ignoreNested) {
          // B·∫Øt ƒë·∫ßu 1 root
          const startIndex = regex.lastIndex - signal.length;
          startIndexes.push(startIndex);
        } else if (ignoreNested && !startIndexes.length) {
          const startIndex = regex.lastIndex - signal.length;
          startIndexes.push(startIndex);
        }
      } else {
        const startIndex = startIndexes.pop();
        if (startIndex !== undefined) {
          // K·∫øt th√∫c 1 root
          const endIndex = regex.lastIndex;
          const content = liquid.slice(startIndex, endIndex);
          if (isValid(content)) {
            BOCs.push({
              content,
              startIndex,
              id: withUniqId ? v4() : undefined,
            });
          }
        }
      }
    } else {
      break;
    }
  }

  return BOCs;
};

const CHEAT_END_FOR = ` C√°c "BOCs" ƒë·ªÅu:
- B·∫Øt ƒë·∫ßu b·∫±ng "{% for ... %}" (1)
- K·∫øt th√∫c b·∫±ng "{% endfor %}" (2)
- Nested -> T·ª©c trong BOCs n√†y c√≥ th·ªÉ BOCs kh√°c hay n√≥i c√°ch kh√°c l√† v√≤ng for l·ªìng nhau (3)
==> T·ª´ (3) g·∫∑p r·∫Øc r·ªëi trong vi·ªác regex v√¨ vi·ªác l·∫∑p code l√† c√≥ th·ªÉ x·∫£y ra. C·ª• th·ªÉ ·ªü ƒë√¢y l√† tr∆∞·ªùng h·ª£p ".replace(/{%\s*endfor\s*%}/g, '')" ·ªü d∆∞·ªõi
==> Th√™m ƒëo·∫°n n√†y ƒë·ªÉ cheat regex ƒë√∫ng v√† d·ªÖ d√†ng
`;
interface HandleShopifyTagInForloop {
  liquid: string;
  settings: ComponentData['settings'];
}

/**
 * Version 2: Cho ph√©p d√πng array trong c·∫∑p th·∫ª shopify
 * √ù t∆∞·ªüng L·∫•y to√†n b·ªô BOC v√≤ng for -> L·∫•y ra array ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ loop v√† t√™n bi·∫øn ƒë∆∞·ª£c ƒë·∫∑t -> T·∫°o ra n (v·ªõi n l√† ƒë·ªô d√†i array) ƒëo·∫°n code v√† c√°c gi√° tr·ªã (key trong array object) ƒë∆∞·ª£c assign v√†o c√°c bi·∫øn uniq (uuid-v4) v√† th·∫ø v√†o C√πng v·ªõi ƒë√≥ l√† c√°c bi·∫øn c·ªßa forloop(index, first, last, ...)

üî¥ L∆∞u √Ω 1:
  * Kh√° kh√≥ v√¨ kh√¥ng th·ªÉ ƒë√∫ng cho tr∆∞·ªùng h·ª£p bi·∫øn array ƒë∆∞·ª£c t·∫°o t·ª´ 1 bi·∫øn kh√°c
  * V√≠ d·ª• case kh√¥ng th·ªÉ gi·∫£i quy·∫øt:
    Input: `
      <shopify>
        {% assign tags = veda_field_in_array | split: "," %}
        {% for tag in tags %}
          <h1>{{ tag }}<h1>
        {% endfor }
      </shopify>
    `

üî¥ L∆∞u √Ω 2:
* Kh√≥ v√¨ c√°ch l√†m n√†y l√† th·∫ø ch·ª© kh√¥ng ph·∫£i compile -> C√°c filter, ... s·∫Ω kh√¥ng ƒë·∫£m b·∫£o l√† c√≥ th·ªÉ s·ª≠ d·ª•ng v√† ƒë√∫ng
* V√≠ d·ª• tr∆∞·ªùng h·ª£p ƒë√∫ng:
  Input: {
    liquid: `
    <shopify>
      {% for option in options %}
        <h1>{{ option.title | capitalize }}</h1>
      {% endfor %}
    </shopify>
    `,
    settings: [
      { name: options, children: ["Size", "Color", ...], ... },
      ...
    ]
  }

  Output: `
    <shopify>
      <h1>{{ "Size" | capitalize }}</h1>
      <h1>{{ "Color" | capitalize }}</h1>
      <h1>{{ ... | capitalize }}</h1>
    </shopify>
  `
üî¥ L∆∞u √Ω 3: Lu·ªìng x·ª≠ l√Ω tr·ªü n√™n kh√° ph·ª©c t·∫°p n·∫øu th√™m v√¨ nhi·ªÅu h√†nh ƒë·ªông ƒë∆∞·ª£c l·∫∑p l·∫°i
- V√≠ d·ª• th√™m ch·ª©c nƒÉng "Shopify Picker" trong field "Array" -> Khi ƒë√≥ logic c·ªßa "handleReplaceShopifyPickerInSchemaSettingToLiquid" s·∫Ω l·∫∑p l·∫°i 1 l·∫ßn n·ªØa t·∫°i ƒë√¢y ƒë·ªÉ th·∫ø ƒë∆∞·ª£c c√°c gi√° tr·ªã c·ªßa "Shopify Picker" v√†o v·ªã tr√≠ th√≠ch h·ª£p
- Input:
  {% for item in picker_products_result %}
    {{ item.title }}
  {% endfor %}
- Output:
  {% assign item = all_products[GI√Å TR·ªä C·ª¶A "ITEM" - T·ª®C HANDLE C·ª¶A PRODUCT THU·ªòC "ITEM C√ì INDEX 0"] %}
    {{ item.title }}
  ...


‚úÖ Example:
- Input: {
  liquid: `
  {% for option in options %}
    <h1>
        <shopify>{{ option.title }}</shopify>
    </h1>
  {% endfor %}
  `,
  settings: [
    { type: 'array', children: [...], ... },
    ...
  ]
}

- Output: `
<h1>
	<shopify>{{ "Size" }}</shopify>
</h1>
<h1>
	<shopify>{{ "Size" }}</shopify>
</h1>
{% assign option = null %}
`
*/

export const handleShopifyTagInForloop_ = ({ liquid, settings }: HandleShopifyTagInForloop) => {
  const START_BOC = new RegExp(/{%\s*for\s+.*\s+in\s+.*\s*%}/);
  const END_BOC = new RegExp(/{%\s*endfor\s*%}/);
  const settings_ = settings.filter(setting => setting.type === 'array') as SettingArray[];

  let liquid_ = liquid;
  let BOCs = getBOCsBetweenSomething_({
    liquid: liquid_,
    startBOC: START_BOC,
    endBOC: END_BOC,
    ignoreNested: false,
    withUniqId: false,
    isValid: BOC =>
      new RegExp(`<${Consts.FakeTags.Shopify}>`).test(BOC) &&
      new RegExp(`</${Consts.FakeTags.Shopify}>`).test(BOC) &&
      settings_.some(setting => isExistExactVariableNameInLiquidCode(BOC, setting.name)),
  });

  // Ph·∫£i x·ª≠ l√≠ nested - DONE
  while (BOCs.length) {
    const BOC = BOCs.shift();
    if (BOC) {
      const [line_of_code_start_for] = getMatches(BOC.content, new RegExp(/{%\s*for.*%}/g));
      if (line_of_code_start_for) {
        // L·∫•y ra content ("...") b√™n trong c·∫∑p th·∫ª "{% for ... %}"
        const contentOfForLoop = BOC.content
          // Chu·∫©n ho√° ƒë·ªÉ tr√°nh l·ªói khi d√πng "concat" do BOC c√≥ th·ªÉ th·ª´a ra 1 c√°i g√¨ ƒë√≥
          .replace(/^\n/, '')
          .replace(/\n$/, '')
          .trim()
          // Th√™m CHEAT_END_FOR ƒë·ªÉ regex d·ªÖ d√†ng h∆°n (tr√°nh tr∆∞·ªùng h·ª£p tr√πng l·∫∑p)
          .concat(CHEAT_END_FOR)
          .replace(line_of_code_start_for, '')
          .replace(new RegExp(`{%\\s*endfor\\s*%}.*${strToRegexpPattern(CHEAT_END_FOR)}`, 'g'), '');

        // XoÃÅa nested ƒë√™Ãâ th√™ÃÅ caÃÅc bi√™ÃÅn cuÃâa forloop shopify ƒëuÃÅng viÃ£ triÃÅ
        const nested = getBOCsBetweenSomething_({
          endBOC: END_BOC,
          startBOC: START_BOC,
          liquid: contentOfForLoop,
          ignoreNested: true,
          withUniqId: true,
          isValid: () => true,
        });

        const contentOfForLoopRemoveNested = nested.reduce<typeof contentOfForLoop>((res, nestedBOC) => {
          return res.replaceAll(nestedBOC.content, `<----- ${nestedBOC.id} ----->`);
        }, contentOfForLoop);

        // T√°ch ra c√°c ph·∫ßn t·ª≠ c·∫ßn thi·∫øt (bi·∫øn l·∫∑p, bi·∫øn array, limit, offset, reversed)
        const [loopVariableName, _, arrayName, ...limit_offset_reversed] = line_of_code_start_for
          .replace(/{%\s*for/g, '')
          .replace('%}', '')
          .trim()
          .replace(/\s+/g, ' ')
          .split(' ')
          .map(item => item.trim());

        // T√¨m bi·∫øn g·ªëc
        const liquidContext = liquid_.slice(0, BOC.startIndex);
        const liquidTagClauses = getBOCsBetweenSomething_({
          liquid: liquidContext,
          startBOC: /{%\s*liquid/,
          endBOC: /%}/,
          ignoreNested: false,
          withUniqId: false,
          isValid: () => true,
        });

        let variableName = arrayName;
        while (true) {
          const assignClausesRelateToArrayNameAbove = getMatches(
            liquidContext,
            new RegExp(`{%\\s*assign\\s*${strToRegexpPattern(variableName)}\\s*=.* %}`, 'g'),
          );
          const lastClause = assignClausesRelateToArrayNameAbove.pop();
          if (lastClause) {
            const [_fakeName, _equalSignal, targetName] = lastClause
              .replace(/{%\s*assign/g, '')
              .replace('%}', '')
              .trim()
              .replace(/\s+/g, ' ')
              .split(' ')
              .map(item => item.trim());
            if (variableName === targetName || targetName === arrayName) {
              break;
            } else {
              variableName = targetName;
            }
          } else {
            const liquidClausesRelateToArraynameAbove = liquidTagClauses.filter(liquidClause => liquidClause.content.includes(variableName));
            const lastLiquidClause = liquidClausesRelateToArraynameAbove.pop();
            if (lastLiquidClause) {
              const _lastLiquidClause = SHOPIFY_TAG.reduce((res, shopifyTag) => {
                return replaceExactRegexpInLiquidCode(res, new RegExp(shopifyTag, 'g'), `\n${shopifyTag}`);
              }, lastLiquidClause.content);
              const assignClausesRelateToArrayNameAbove = getMatches(
                _lastLiquidClause,
                new RegExp(`\nassign\\s*${strToRegexpPattern(variableName)}\\s*=.*\n`, 'g'),
              );
              const lastAssignClause = assignClausesRelateToArrayNameAbove.pop();
              if (lastAssignClause) {
                const [_fakeName, _equalSignal, targetName] = lastAssignClause
                  .replace(/\n/g, '')
                  .replace(/assign/g, '')
                  .trim()
                  .replace(/\s+/g, ' ')
                  .split(' ')
                  .map(item => item.trim());
                if (variableName === targetName || targetName === arrayName) {
                  break;
                } else {
                  variableName = targetName;
                }
              } else {
                break;
              }
            } else {
              break;
            }
          }
        }

        // T√¨m settings t∆∞∆°ng ·ª©ng v·ªõi bi·∫øn g·ªëc
        const data = settings_.find(block => block.name === variableName);
        if (!data) {
          continue;
        }
        // X·ª≠ l√≠ array n·∫øu c√≥ limit, offset, reversed;
        const { limit, offset, reversed } = limit_offset_reversed?.reduce<{
          limit: number | undefined;
          reversed: boolean | undefined;
          offset: number | undefined;
        }>(
          (result, atomicClause, index) => {
            if (atomicClause.includes('limit')) {
              return {
                ...result,
                limit: Number(limit_offset_reversed[index + 1]),
              };
            }
            if (atomicClause.includes('reversed')) {
              return {
                ...result,
                reversed: true,
              };
            }
            if (atomicClause.includes('offset')) {
              return {
                ...result,
                offset: Number(limit_offset_reversed[index + 1]),
              };
            }
            return result;
          },
          { limit: undefined, reversed: false, offset: undefined },
        );
        let preprocessChildren = [...data.children];
        if (typeof limit === 'number' && !isNaN(limit)) {
          preprocessChildren = preprocessChildren.slice(0, limit);
        }
        if (typeof offset === 'number' && !isNaN(offset)) {
          preprocessChildren = preprocessChildren.slice(offset);
        }
        if (reversed && typeof reversed === 'boolean') {
          preprocessChildren.reverse();
        }

        const codeArr = preprocessChildren.reduce<any[]>((newCode, item, index) => {
          let code = contentOfForLoopRemoveNested;
          // th·∫ø bi·∫øn loop
          const firstVariable = index === 0;
          const indexVariable = index + 1;
          const index0Variable = index;
          const lastVariable = index === data.children.length - 1;
          const lengthVariable = data.children.length;
          const rIndexVariable = data.children.length - index;
          const rIndex0Variable = data.children.length - index + 1;
          code = code
            .replace(new RegExp(strToRegexpPattern('forloop.first'), 'g'), `${firstVariable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.index0'), 'g'), `${index0Variable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.index'), 'g'), `${indexVariable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.last'), 'g'), `${lastVariable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.length'), 'g'), `${lengthVariable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.rIndex0'), 'g'), `${rIndex0Variable}`)
            .replace(new RegExp(strToRegexpPattern('forloop.rIndex'), 'g'), `${rIndexVariable}`);

          // Th√™ÃÅ laÃ£i nested
          code = nested.reduce<string>((res, nestedBOC) => {
            return res.replaceAll(`<----- ${nestedBOC.id} ----->`, nestedBOC.content);
          }, code);

          // Th·∫ø gi√° tr·ªã v√†o c√°c bi·∫øn
          const valuesOfLoopStepVariable = item.children;
          valuesOfLoopStepVariable.forEach(valueOfLoopStepVariable => {
            if (valueOfLoopStepVariable.children !== undefined) {
              const fieldValue = valueOfLoopStepVariable.children;
              const fieldName = valueOfLoopStepVariable.name;
              // Logic thay th·∫ø gi√° tr·ªã gi·ªëng v·ªõi "handleFieldIsTranslation" & "handleReplaceShopifyPickerInSectionSettingToLiquid" & "handleReplaceNonShopifyPickerInSectionSetingToTagShopify"
              if (valueOfLoopStepVariable.type === 'navigation') {
                throw new LiquidSyntaxToTwigError(i18n.t('twig_error.clause_in_shopify.navigation'));
              } else if (valueOfLoopStepVariable.type === 'products') {
                throw new LiquidSyntaxToTwigError(i18n.t('twig_error.clause_in_shopify.products'));
              } else if (valueOfLoopStepVariable.type === 'hidden') {
                code = code;
              } else if (valueOfLoopStepVariable.type === 'articlePicker') {
                const value = valueOfLoopStepVariable.children.handle;
                const value_ = convertToSyntaxShopifyDataType(value);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
              } else if (valueOfLoopStepVariable.type === 'blogPicker' && valueOfLoopStepVariable.children) {
                const value = valueOfLoopStepVariable.children.handle;
                const value_ = convertToSyntaxShopifyDataType(value);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
              } else if (valueOfLoopStepVariable.type === 'collectionPicker' && valueOfLoopStepVariable.children) {
                const value = valueOfLoopStepVariable.children.handle;
                const value_ = convertToSyntaxShopifyDataType(value);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
              } else if (valueOfLoopStepVariable.type === 'productPicker' && valueOfLoopStepVariable.children) {
                const value = valueOfLoopStepVariable.children.handle;
                const value_ = convertToSyntaxShopifyDataType(value);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
              } else if (valueOfLoopStepVariable.type === 'image' && valueOfLoopStepVariable.children) {
                const value = valueOfLoopStepVariable.children.src;
                const value_ = convertToSyntaxShopifyDataType(value);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
                Object.entries(valueOfLoopStepVariable.children).forEach(([key, valueOfKey]) => {
                  const value_ = convertToSyntaxShopifyDataType(valueOfKey);
                  const syntaxInCode = `${loopVariableName}.${fieldName}.${key}`;
                  code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
                });
              }

              // Fix cho field "divider" v√¨ "divider c√≥ name='' n√™n replace ch·∫°y li√™n t·ª•c d·∫´n ƒë·∫øn sai"
              else if (valueOfLoopStepVariable.name === '') {
                code = code;
              } else if (isFieldTranslation(valueOfLoopStepVariable)) {
                const value_ = valueOfLoopStepVariable.children as string;
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), () => {
                  const twig = value_
                    .replace(/({\s*)(veda\.[\w.]*)(\s*})/g, translationClause => {
                      const keyOfTranslation = translationClause
                        .replace(/{/g, '')
                        .replace(/}/g, '')
                        .trim();
                      return `"${keyOfTranslation}" | t`;
                    })
                    .trim();

                  return twig;
                });
              } else if (typeof fieldValue === 'string' || typeof fieldValue === 'number' || typeof fieldValue === 'boolean') {
                const value_ = convertToSyntaxShopifyDataType(fieldValue);
                const syntaxInCode = `${loopVariableName}.${fieldName}`;
                code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
              } else if (typeof fieldValue === 'object' && !Array.isArray(fieldValue)) {
                const valueOfLoopStepVariable_ = valueOfLoopStepVariable as SettingResponsive | SettingFlexOrder | SettingSpace;
                if (valueOfLoopStepVariable_.children) {
                  Object.entries(valueOfLoopStepVariable_.children).forEach(([key, valueOfKey]) => {
                    if (typeof valueOfKey === 'string' || typeof valueOfKey === 'number' || typeof valueOfKey === 'boolean') {
                      const value_ = convertToSyntaxShopifyDataType(valueOfKey);
                      const syntaxInCode = strToRegexpPattern(`${loopVariableName}.${fieldName}.${key}`);
                      code = replaceExactRegexpInLiquidCode(code, new RegExp(syntaxInCode, 'g'), value_);
                    }
                  });
                }
              }
            }
          });

          // TODO: Tr∆∞·ªùng h·ª£p reset value n·∫±m trong {% liquid ... %} th√¨ sao?
          // if (lastVariable) {
          //   code = code.concat(`{% assign ${loopVariableName} = null %}`);
          // }

          return newCode.concat(code);
        }, []);

        const newCode = codeArr.join('\n');
        liquid_ = liquid_.replace(BOC.content, newCode);
        BOCs = BOCs.map(item => {
          return {
            ...item,
            content: item.content.replaceAll(BOC.content, newCode),
          };
        });
      }
    }
  }

  return liquid_;
};

export const handleShopifyTagInForloop = ({ liquid, settings }: HandleShopifyTagInForloop) => {
  const preprocessDataFlow = compose(handleReplaceGeneralOpenCloseBlock, handleBOCDelimiters);
  const preprocessData = preprocessDataFlow(liquid);

  return handleBOCDelimitersPostprocess(handleShopifyTagInForloop_({ liquid: preprocessData, settings }));
};
